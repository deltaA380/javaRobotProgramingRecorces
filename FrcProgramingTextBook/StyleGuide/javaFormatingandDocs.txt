6 Programming Practices

6.1 @Override: always used

	A method is marked with the @Override annotation whenever it is legal. This includes a class method overriding a superclass method, 
	a class method implementing an interface method, and an interface method respecifying a superinterface method.

	Exception: @Override may be omitted when the parent method is @Deprecated.
6.2 Caught exceptions: not ignored

	Except as noted below, it is very rarely correct to do nothing in response to a caught exception. 
	(Typical responses are to log it, or if it is considered "impossible", rethrow it as an AssertionError.)

	When it truly is appropriate to take no action whatsoever in a catch block, the reason this is justified is explained in a comment.

	try {
	  int i = Integer.parseInt(response);
	  return handleNumericResponse(i);
	} catch (NumberFormatException ok) {
	  // it's not numeric; that's fine, just continue
	}
	return handleTextResponse(response);

	Exception: In tests, a caught exception may be ignored without comment if its name is or begins with expected. The following is a very common idiom for ensuring that the code under test does throw an exception of the expected type, so a comment is unnecessary here.

	try {
	  emptyStack.pop();
	  fail();
	} catch (NoSuchElementException expected) {
	}

6.3 Static members: qualified using class

	When a reference to a static class member must be qualified, it is qualified with that class's name, not with a reference or expression of that class's type.

	Foo aFoo = ...;
	Foo.aStaticMethod(); // good
	aFoo.aStaticMethod(); // bad
	somethingThatYieldsAFoo().aStaticMethod(); // very bad

6.4 Finalizers: not used

	It is extremely rare to override Object.finalize.

	Tip: Don't do it. If you absolutely must, first read and understand Effective Java Item 7, "Avoid Finalizers," very carefully, and then don't do it.
7 Javadoc
7.1 Formatting
7.1.1 General form

	The basic formatting of Javadoc blocks is as seen in this example:

	/**
	 * Multiple lines of Javadoc text are written here,
	 * wrapped normally...
	 */
	public int method(String p1) { ... }

	... or in this single-line example:

	/** An especially short bit of Javadoc. */

	The basic form is always acceptable. The single-line form may be substituted when the entirety of the Javadoc block
	 (including comment markers) can fit on a single line. Note that this only applies when there are no block tags such as @return.
7.1.2 Paragraphs

	One blank line—that is, a line containing only the aligned leading asterisk (*)—appears between paragraphs, and before the group of block tags if present. 
	Each paragraph but the first has <p> immediately before the first word, with no space after.
7.1.3 Block tags

	Any of the standard "block tags" that are used appear in the order @param, @return, @throws, @deprecated, and these four types never appear with an empty description.
	 When a block tag doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the @.
7.2 The summary fragment

	Each Javadoc block begins with a brief summary fragment. This fragment is very important: it is the only part of the text that appears in certain contexts such as class and method indexes.

	This is a fragment—a noun phrase or verb phrase, not a complete sentence. It does not begin with A {@code Foo} is a..., or This method returns..., nor does it form a complete imperative sentence like Save the record.. However, the fragment is capitalized and punctuated as if it were a complete sentence.

	Tip: A common mistake is to write simple Javadoc in the form /** @return the customer ID */. This is incorrect, and should be changed to /** Returns the customer ID. */.
7.3 Where Javadoc is used

	At the minimum, Javadoc is present for every public class, and every public or protected member of such a class, with a few exceptions noted below.

	Additional Javadoc content may also be present, as explained in Section 7.3.4, Non-required Javadoc.
7.3.1 Exception: self-explanatory methods

	Javadoc is optional for "simple, obvious" methods like getFoo, in cases where there really and truly is nothing else worthwhile to say but "Returns the foo".

	Important: it is not appropriate to cite this exception to justify omitting relevant information that a typical reader might need to know. For example, for a method named getCanonicalName, don't omit its documentation (with the rationale that it would say only /** Returns the canonical name. */) if a typical reader may have no idea what the term "canonical name" means!
7.3.2 Exception: overrides

	Javadoc is not always present on a method that overrides a supertype method.
7.3.4 Non-required Javadoc

	Other classes and members have Javadoc as needed or desired.

	Whenever an implementation comment would be used to define the overall purpose or behavior of a class or member, that comment is written as Javadoc instead (using /**).

