



5.2.2 Class names

	Class names are written in UPPERCAMELCASE.

	Class names are typically nouns or noun phrases. For example, Character or ImmutableList. Interface names may also be nouns or noun phrases 
	(for example, List), but may sometimes be adjectives or adjective phrases instead (for example, Readable).



Method names are written in lowercamelcase.

	Method names are typically verbs or verb phrases. For example, sendMessage or stop.


5.2.4 Constant names

	Constant names use CONSTANT_CASE: all uppercase letters, with each word separated from the next by a single underscore. But what is a constant, exactly?

	Constants are static final fields whose contents are deeply immutable and whose methods have no detectable side effects. 
	This includes primitives, Strings, immutable types, and immutable collections of immutable types. 
	IF ANY OF THE INSTANCE'S OBSERVABLE STATE CAN CHANGE, IT IS NOT A CONSTANT. MERELY INTENDING TO NEVER MUTATE THE OBJECT IS NOT ENOUGH. Examples:

						// Constants
						static final int NUMBER = 5;
						static final ImmutableList<String> NAMES = ImmutableList.of("Ed", "Ann");
						static final ImmutableMap<String, Integer> AGES = ImmutableMap.of("Ed", 35, "Ann", 32);
						static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutable
						static final SomeMutableType[] EMPTY_ARRAY = {};
						enum SomeEnum { ENUM_CONSTANT }

						// Not constants
						static String nonFinal = "non-final";
						final String nonStatic = "non-static";
					
						These names are typically nouns or noun phrases.

5.2.5 Non-constant field names

	Non-constant field names (static or otherwise) are written in lowerCamelCase.

	
5.2.6 Parameter names

	Parameter names and local  are written in lowercamelcase.

	One-character parameter names in public methods should be avoided.

5.2.8 Type variable names

Each type variable is named in one of two styles:

    A single capital letter, optionally followed by a single numeral (such as E, T, X, T2)
    A name in the form used for classes (see Section 5.2.2, Class names), followed by the capital letter T (examples: RequestT, FooBarT).
	If varriable name has units it will have them declared in its name ex. velocityM/S

5.3 Camel case: defined

Sometimes there is more than one reasonable way to convert an English phrase into camel case, such as when acronyms or unusual constructs like "IPv6" or "iOS" are present. To improve predictability, Google Style specifies the following (nearly) deterministic scheme.

Beginning with the prose form of the name:

    Convert the phrase to plain ASCII and remove any apostrophes. For example, "MÃ¼ller's algorithm" might become "Muellers algorithm".
    Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens).
        Recommended: if any word already has a conventional camel-case appearance in common usage, split this into its constituent parts (e.g., "AdWords" becomes "ad words"). Note that a word such as "iOS" is not really in camel case per se; it defies any convention, so this recommendation does not apply.
    Now lowercase everything (including acronyms), then uppercase only the first character of:
        ... each word, to yield upper camel case, or
        ... each word except the first, to yield lower camel case
    Finally, join all the words into a single identifier.

Note that the casing of the original words is almost entirely disregarded. Examples:
Prose form 	Correct 	Incorrect
 will add own custom examples


Note: Some words are ambiguously hyphenated in the English language: for example "nonempty" and "non-empty" are both correct, 
so the method names checkNonempty and checkNonEmpty are likewise both correct.
